#!/bin/bash

# TODO: find and remove stale socket links on startup

set -euo pipefail

trap cleanup INT
trap cleanup HUP
__cleanup_done=0

function realpath() {
    local f=$1
    local os="$(uname -s)"
    if [[ "$os" == "Linux" || "$os" == "FreeBSD" ]]; then
        readlink -f $f
    else
        if [[ -L "$f" ]]; then
            f=$(readlink $f)
        fi
        if [[ -d "$f" ]]; then
            cd $f
            pwd -P
        else
            cd $(dirname $f)
            echo $(pwd -P)/$(basename $f)
        fi
    fi
}

function sed_dash_i_dash_E() {
    if sed --version >& /dev/null; then
        # GNU sed
        sed -E -i "$@"
    else
        # BSD / Darwin sed
        sed -E -i '' "$@"
    fi
}

function log() {
    echo "$(hostname)	$(date +%Y/%m/%d\ %H:%M:%S)	$$	$1" >> ~/.tmuxsel.log
    true
}

kill_agent_on_exit=0
function cleanup() {
    if [[ "$__cleanup_done" == "0" ]]; then
        [[ "$kill_agent_on_exit" == 1 && -n "$SSH_AGENT_PID" ]] \
            && kill $SSH_AGENT_PID >/dev/null 2>&1 || true
        del_stable_ssh_auth_sock
        log "Cleanup"
        __cleanup_done=1
    fi
    exit
}

function get_session_env() {
    cmdline="tmux show-environment -t $1 $2 2>/dev/null | cut -d= -f2-"
    log "Executing '$cmdline'"
    ret=$(eval $cmdline)
    log "Result: '$ret'"
    echo "$ret"
}

function set_session_env() {
    cmdline="tmux set-environment -t $1 $2 $3 2>&1"
    log "Executing '$cmdline'"
    ret=$(eval $cmdline)
    log "Result: '$ret'"
}

function mk_stable_ssh_auth_sock() {
    local sas=$1 # SSH_AUTH_SOCK
    local ssid=$2 # tmux ssession id (empty if a new session is being created)

    log "SSAS: creating new / updating existing ssas for ssid=$ssid"
    if [[ -n "${sas+x}" ]]; then
        if [[ "$ssid" == "__new__" ]]; then
            mkdir -p $STABLE_SOCKETS_DIR
            ssas=$(TMPDIR=$STABLE_SOCKETS_DIR mktemp -t $HOSTNAME.XXXXX)
            log "SSAS: created a new ssas=$ssas"
        else
            ssas=$(get_session_env $ssid $sas)
            ssas_dir=$(dirname $ssas)
            if [[ "$ssas_dir" != "$STABLE_SOCKETS_DIR" ]]; then
                log "SSAS: detected broken ssas=$ssas. replacing!"
                ssas=$(TMPDIR=$STABLE_SOCKETS_DIR mktemp -t $HOSTNAME.XXXXX)
                log "SSAS: created a new ssas=$ssas"
                set_session_env $ssid $sas $ssas
            else
                log "SSAS: fetched existing ssas=$ssas"
            fi
        fi

        if [[ -n "$ssas" ]]; then
            # symlink the socket from the current environment to the stable one
            cmdline="ln -sf ${!sas} $ssas"
            log "Executing $cmdline"
            $cmdline
            echo $ssas
        else
            log "SSAS: something went wrong -- empty ssas"
        fi
    fi
}

function del_stable_ssh_auth_sock() {
    # This is inherently racey...
    if [[ -n "${stable_ssh_auth_sock+x}" && -z "${attached_clients+x}" ]]; then
        rm -rf $stable_ssh_auth_sock
        log "SSAS: removed ssas=$stable_ssh_auth_sock for ssid=$ssid"
        stable_ssh_auth_sock=""
    fi
}

find_program() {
    if [[ ${ZSH_VERSION+X} == "X" ]]; then
        whence $1 || true
    else
        type -P $1 || true
    fi
}

clear=$(find_program clear)
function refresh_screen() {
    [[ -n "$clear" ]] && clear -x
}

if [[ "$OSTYPE" == cygwin ]]; then
    # Set up paths here to avoid polluting global environment
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH
fi

if [[ "${1+X}" == "-" ]]; then
    shift
    PLEASE_SOURCE_BASHRC=1
    BASHRC_MINIMAL_MODE=1
    source $HOME/.profile
    source $HOME/.bashrc
fi

export DARK_MODE=1
if [[ "${1+X}" == "--dark" ]]; then
    echo "Running in DARK MODE"
    export DARK_MODE=1
    shift
fi
if [[ "${1+X}" == "--lite" ]]; then
    echo "Running in LITE MODE"
    export DARK_MODE=0
    shift
fi

# dirty hack to update the shell location
def_shell=$(type -p $(basename ${SHELL:-bash}))  # XXX: this may pick up a different shell based on $PATH... (WNF)
set_def_shell="set -g default-shell $def_shell"
# sed_dash_i_dash_E "s,^(set -g default-shell) .*$,\1 $def_shell," $(realpath $HOME/.tmux.conf)

ssh_kind=
if [[ -n "$(type -p ssh)" ]]; then
    ssh -V 2>&1 | grep -qs "OpenSSH" && ssh_kind=openssh
    ssh -V 2>&1 | grep -qs "Reflection" && ssh_kind=reflection
fi

source ~/.profile

if [[ -z "$(find_program tmux)" ]]; then
    ${SHELL:-bash} "$@"
    exit
fi

STABLE_SOCKETS_DIR=${STABLE_SOCKETS_DIR:-$HOME/.ssh_auth_socks}
if [[ "$ssh_kind" == "reflection" ]]; then
    if [[ -z "$SSH2_AUTH_SOCK" ]]; then
        eval $(ssh-agent2)
        ssh-add
        kill_agent_on_exit=1
    fi
    ssh_auth_sock=SSH2_AUTH_SOCK
else
    if [[ -z "$SSH_AUTH_SOCK" ]]; then
        eval $(ssh-agent)
        ssh-add
        kill_agent_on_exit=1
    fi
    ssh_auth_sock=SSH_AUTH_SOCK
fi
log "TMUXSEL starting"
log "ssh_auth_sock=$ssh_auth_sock"
log "def_shell=$def_shell"
log "SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
log "tmux=$(find_program tmux)"

while true; do
    ssh_hosts=
    tmuxsel_hosts=$HOME/.tmuxsel-ssh-hosts
    if [[ -f $tmuxsel_hosts ]]; then
        ssh_hosts=$(cat $tmuxsel_hosts | sed 's/^/ssh:/')
    fi
    tmux_sessions=$(tmux list-sessions 2>/dev/null | sed 's/^/tmux:/;s/[[:space:]]/_/g' || true)
    select s in shell tmux $ssh_hosts $tmux_sessions; do
        case $s in
            shell)
                refresh_screen
                $SHELL -
                break
                ;;
            ssh:*)
                host=$(echo $s | cut -f2 -d:)
                log "SSHing to $host"
                refresh_screen
                command ssh $host -t 'if test -e $HOME/bin/tmuxsel; then $HOME/bin/tmuxsel - ; else $SHELL -l ; fi'
                log "Connection closed"
                break
            ;;
            tmux)
                log "Creating new tmux session"
                ssid="__new__"  # this is mostly for debug purposes
                stable_ssh_auth_sock=$(mk_stable_ssh_auth_sock "$ssh_auth_sock" "$ssid")
                cmdline="$ssh_auth_sock=$stable_ssh_auth_sock tmux -2 -u $set_def_shell \\; new-session"
                log "Executing '$cmdline'"
                eval $cmdline
                # del_stable_ssh_auth_sock  # cannot reliably tell whether we can delete the socket; let it be
                log "Session closed"
                break
            ;;
            tmux:*)
                ssid=$(echo $s | cut -f2 -d:)
                log "Attaching to tmux session '$ssid'"
                stable_ssh_auth_sock=$(mk_stable_ssh_auth_sock $ssh_auth_sock $ssid)
                log "Updated stable ssh auth socket $stable_ssh_auth_sock"
                cmdline="tmux -2 -u $set_def_shell \\; attach-session -t $ssid -E"
                log "Executing '$cmdline'"
                eval $cmdline
                attached_clients=$(tmux list-clients -t $ssid 2>/dev/null)
                del_stable_ssh_auth_sock
                log "Session closed"
                break
            ;;
        esac
    done
    refresh_screen
done

cleanup
