#!/bin/bash

# TODO: find and remove stale socket links on startup

trap cleanup INT
trap cleanup HUP

function log() {
    echo "$(hostname)	$(date +%Y/%m/%d\ %H:%M:%S)	$$	$1" >> ~/.tmuxsel.log
    true
}

function cleanup() {
    [[ -n "$SSH_AGENT_PID" ]] && kill $SSH_AGENT_PID >/dev/null 2>&1 || true
    log "Cleanup"
    del_stable_ssh_auth_sock $stable_ssh_auth_sock $ssid
    exit
}

function get_session_env() {
    cmdline="tmux show-environment -t $1 $2 2>/dev/null | cut -d= -f2-"
    log "Executing '$cmdline'"
    ret=$(eval $cmdline)
    log "Result: '$ret'"
    echo "$ret"
}

function mk_stable_ssh_auth_sock() {
    local sas=$1 # SSH_AUTH_SOCK
    local ssid=$2 # tmux ssession id (empty if a new session is being created)

    log "SSAS: creating new / updating existing ssas for ssid=$ssid"
    if [[ -n "$sas" ]]; then
        if [[ "$ssid" == "__new__" ]]; then
            STABLE_SOCKETS_DIR=$HOME/.ssh_auth_socks
            mkdir -p $STABLE_SOCKETS_DIR
            ssas=$(mktemp -p $STABLE_SOCKETS_DIR $HOSTNAME.XXXXXX)
            log "SSAS: created a new ssas=$ssas"
        else
            ssas=$(get_session_env $ssid $sas)
            log "SSAS: fetched existing ssas=$ssas"
        fi

        if [[ -n "$ssas" ]]; then
            # symlink the socket from the current environment to the stable one
            cmdline="ln -sf ${!sas} $ssas"
            log "Executing $cmdline"
            $cmdline
            echo $ssas
        else
            log "SSAS: something went wrong -- empty ssas"
        fi
    fi
}

function del_stable_ssh_auth_sock() {
    local ssas=$1
    local ssid=$2
    [[ -n "$ssas" ]] && rm -rf $ssas
    log "SSAS: removed ssas=$ssas for ssid=$ssid"
}

if [[ "$OSTYPE" == cygwin ]]; then
    # Set up paths here to avoid polluting global environment
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH
fi

if [[ "$1" == "-" ]]; then
    shift
    PLEASE_SOURCE_BASHRC=1
    source $HOME/.profile
    source $HOME/.bashrc
fi

export DARK_MODE=0
if [[ "$1" == "--dark" ]]; then
    echo "Running in DARK MODE"
    export DARK_MODE=1
    shift
fi

if [[ -z "$(type -p tmux)" ]]; then
    bash "$@"
    exit
fi

# dirty hack to update the shell location
sed -i -E "s,^(set -g default-shell).*$,\1 $(type -p bash)," $HOME/.tmux.conf

ssh_kind=
if [[ -n "$(type -p ssh)" ]]; then
    ssh -V 2>&1 | grep -qs "OpenSSH" && ssh_kind=openssh
    ssh -V 2>&1 | grep -qs "Reflection" && ssh_kind=reflection
fi

source ~/.profile

if [[ "$ssh_kind" == "reflection" ]]; then
    eval $(ssh-agent2)
    ssh-add
    ssh_auth_sock=SSH2_AUTH_SOCK
else
    ssh_auth_sock=SSH_AUTH_SOCK
fi
log "TMUXSEL starting"
log "ssh_auth_sock=$ssh_auth_sock"

while true; do
    select s in bash tmux $(tmux list-sessions | sed 's/^/tmux:/;s/[[:space:]]/_/g'); do
        [[ -z "$s" ]] && s=bash
        case $s in
            bash) bash - ;;
            tmux)
                log "Creating new tmux session"
                ssid="__new__"  # this is mostly for debug purposes
                stable_ssh_auth_sock=$(mk_stable_ssh_auth_sock "$ssh_auth_sock" "$ssid")
                cmdline="$ssh_auth_sock=$stable_ssh_auth_sock tmux -2 -u"
                log "Executing '$cmdline'"
                eval $cmdline
                del_stable_ssh_auth_sock $stable_ssh_auth_sock $ssid
                log "Session closed"
            ;;
            *)
                ssid=$(echo $s | cut -f2 -d:)
                log "Attaching to tmux session '$ssid'"
                stable_ssh_auth_sock=$(mk_stable_ssh_auth_sock $ssh_auth_sock $ssid)
                log "Updated stable ssh auth socket $stable_ssh_auth_sock"
                cmdline="tmux attach-session -t $ssid -E"
                log "Executing '$cmdline'"
                eval $cmdline
                del_stable_ssh_auth_sock $stable_ssh_auth_sock $ssid
                log "Session closed"
            ;;
        esac
        break;
    done
done

cleanup
