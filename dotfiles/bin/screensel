#!/bin/bash

stable_ssh_socks_dir=$HOME/.ssh_auth_socks

function get_session_pid() {
    echo ${1%%.*}
}

function mk_stable_ssh_auth_sock() {
    mktemp -p $stable_ssh_socks_dir $HOSTNAME.XXXXXX
}

function clean_unused_stable_ssh_auth_socks() {
    # TODO: use a hash...
    echo "$@"
    ssh_auth_sock=$1
    shift
    for socket in $stable_ssh_socks_dir/$HOSTNAME.*; do
        found=0
        for session in "$@"; do
            pid=$(get_session_pid $session)
            if [[ "$(get_proc_env $pid $ssh_auth_sock)" == "$socket" ]]; then
                found=1
                break
            fi
        done
        [[ "$found" == 0 ]] && rm $socket
    done
}

function get_proc_env() {
    local pid=$1
    local varname=$2
    for x in $(ps e $pid); do
        if [[ "$x" =~ "$varname=" ]]; then
            echo "${x#$varname=}"
            break
        fi
    done
}

if [[ "$OSTYPE" == cygwin ]]; then
    # Set up paths here to avoid polluting global environment
    export PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH
fi

if [[ -z "$(type -p screen)" ]]; then
        $SHELL -
        exit
fi

ssh_kind=
if [[ -n "$(type -p ssh)" ]]; then
    ssh -V 2>&1 | grep -qs "OpenSSH" && ssh_kind=openssh
    ssh -V 2>&1 | grep -qs "Reflection" && ssh_kind=reflection
fi

source ~/.profile

if [[ "$ssh_kind" == "reflection" ]]; then
    eval $(ssh-agent2)
    ssh-add
    ssh_auth_sock=SSH2_AUTH_SOCK
else
    ssh_auth_sock=SSH_AUTH_SOCK
fi

while true; do
    echo "Select a session to attach to (or start a new one)"
    sessions="$(screen -ls | sed -e '/tached/!d;s/[[:blank:]]//g')"

    select session in new_screen bash $sessions; do
        [[ -z "$session" ]] && session=bash
        case $session in
            bash)
                $SHELL -
            ;;
            new_screen)
                stable_ssh_auth_sock=$(mk_stable_ssh_auth_sock)
                eval ln -sf \$$ssh_auth_sock $stable_ssh_auth_sock
                eval $ssh_auth_sock=$stable_ssh_auth_sock screen -U -l
                rm $stable_ssh_auth_sock
            ;;
            *)
                pid=$(get_session_pid $session)
                stable_ssh_auth_sock=$(get_proc_env $pid $ssh_auth_sock)
                [[ -n "$stable_ssh_auth_sock" ]] \
                    && eval ln -sf \$$ssh_auth_sock $stable_ssh_auth_sock
                screen -U -ln -x ${session%(*}
                [[ -n "$stable_ssh_auth_sock" ]] \
                    && rm $stable_ssh_auth_sock
            ;;
        esac
        break
    done
    # clean_unused_stable_ssh_auth_socks $ssh_auth_sock $sessions
done

[[ -n "$SSH_AGENT_PID" ]] && kill $SSH_AGENT_PID
