call plug#begin()
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-speeddating'
Plug 'klen/python-mode', { 'for' : 'python', 'branch' : 'develop' }
Plug 'jeetsukumaran/vim-buffergator'
Plug 'scrooloose/nerdtree', { 'on' : 'NERDTreeToggle' }
Plug 'chriskempson/base16-vim'
Plug 'flazz/vim-colorschemes'
Plug 'scrooloose/nerdcommenter', { 'for' : ['python', 'c', 'cpp', 'bash', 'sh', 'conf', 'vim', 'perl', 'tex'] }
Plug 'gcmt/taboo.vim'
Plug 'jceb/vim-orgmode'
Plug 'johngrib/vim-game-code-break'
Plug 'majutsushi/tagbar'

"
" YouCompleteMe is awesome at times but drive me nuts most of the time...
"
" function! BuildYCM(info)
"   " info is a dictionary with 3 fields
"   " - name:   name of the plugin
"   " - status: 'installed', 'updated', or 'unchanged'
"   " - force:  set on PlugInstall! or PlugUpdate!
"   if a:info.status == 'installed' || a:info.force
"     !./install.py
"   endif
" endfunction
" Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

call plug#end()

" appearance
set t_Co=256
set termguicolors
au BufWinEnter * highlight WhitespaceError ctermbg=red guibg=red
au BufWinEnter * let w:m3=matchadd('WhitespaceError', '\s\+$', -1)
set cursorline
set colorcolumn=80
set background=light
colorscheme lucius
:LuciusWhiteHighContrast

" configure nerdcommenter
let g:NERDCustomDelimiters = { 'asm': { 'left': '//','right': '' } }
let g:NERDCommentEmptyLines = 1
let g:NERDDefaultAlign='left'
let g:NERDSpaceDelims=1


" for Taboo to remember the tab names in the sessions
set sessionoptions+=tabpages,globals

" configure figutive to use familiar key bindings
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gD :Gdiff<CR>

" youcompleteme / completion in general
set completeopt-=preview

" behavior
set hidden
set wildmode=longest:full,list
set tags=tags,./tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags
set autochdir

set noautoread

set tw=78
set tabstop=4
set shiftwidth=4
set expandtab
set formatoptions=tcqo2nr
set autoindent
set backspace=eol,start,indent
set cino=:0

set incsearch
set ignorecase
set smartcase

set number
set nowrap
set sidescroll=5
set scrolloff=3
set listchars+=precedes:<,extends:>
set showmatch

set mouse=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" status line
set laststatus=2


function! GitInfo()
    let git = fugitive#head()
    if git != ''
        return '↑'.git.'│'
    else
        return ''
    endif
endfunction

function! FuncInfo()
    try
        let ct = tagbar#currenttag('%s', '')
        if ct != ''
            return ct.'│'
        else
            return ''
        endif
    catch
        return ''
    endtry
endfunction

function! RegularStatusLine()
    set statusline=
    set statusline+=▏
    set statusline+=\ %n
    set statusline+=▕%*%<\ %F\ %=▏
    set statusline+=%{FuncInfo()}
    set statusline+=%{GitInfo()}
    set statusline+=%{&fileencoding}
    set statusline+=│
    set statusline+=%{&fileformat}
    set statusline+=│
    set statusline+=%M%R%Y
    set statusline+=│
    set statusline+=%l/%L(%P),%c
endfunction

function! FileNameStatusLine()
    set statusline=%F
endfunction

call RegularStatusLine()
nnoremap <Leader>SF :call FileNameStatusLine()<CR>
nnoremap <Leader>SN :call RegularStatusLine()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar
nnoremap <silent> <F9> :TagbarToggle<CR>
autocmd FileType tagbar setlocal nocursorline nocursorcolumn
let g:tagbar_show_linenumbers = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" sensible-like keybinding to toggle hls
nnoremap <C-l> :set invhls<CR>
nnoremap gn :bn<CR>
nnoremap gp :bp<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Check for modified files (https://github.com/neovim/neovim/issues/2127)
augroup AutoSwap
        autocmd!
        autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
        " if swapfile is older than file itself, just get rid of it
        if getftime(v:swapname) < getftime(a:filename)
                call delete(v:swapname)
                let v:swapchoice = 'e'
        endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave * if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terminal
if has("nvim")
  " Make escape work in the Neovim terminal.
  tnoremap <Esc> <C-\><C-n>

  " Make navigation into and out of Neovim terminal splits nicer.
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l

  " I like relative numbering when in normal mode.
  autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 relativenumber

  " Prefer Neovim terminal insert mode to normal mode.
  autocmd BufEnter term://* startinsert
endif
