if !has("compatible")
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General configuration
syntax on
set hidden
set wildmode=longest:full,list
set tags=tags,./tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags
set autochdir

set noautoread

set tw=80
set tabstop=4
set shiftwidth=4
set expandtab
set formatoptions=tcqo2nr
set autoindent
set backspace=eol,start,indent
set cino=:0:l1,j1

set foldopen=mark,percent,quickfix,search,tag,undo

set incsearch
set ignorecase
set smartcase

set number
set nowrap
set sidescroll=5
set scrolloff=3
set listchars+=precedes:<,extends:>
set showmatch

set foldmethod=syntax

set mouse=nvi
set clipboard=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybindings
nnoremap <C-l> :set invhls<CR>
nnoremap gW :bw<CR>
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Advanced configuration

call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'ngemily/vim-vp4'
Plug 'jeetsukumaran/vim-buffergator' ", { 'on' : 'BuffregatorOpen' }
" Plug 'scrooloose/nerdcommenter', { 'for' : ['python', 'make', 'c', 'cpp', 'cuda', 'bash', 'sh', 'conf', 'vim', 'perl', 'swift', 'tex', 'cmake', 'asm', 'bzl', 'lua', 'tmux'] }
Plug 'scrooloose/nerdcommenter' ", { 'on' : ['<Plug>NERDCommenterUncomment', '<Plug>NERDCommenterComment'] }
Plug 'majutsushi/tagbar', { 'for' : ['c', 'cpp', 'python', 'perl'] }
Plug 'dhruvasagar/vim-table-mode', { 'for' : ['text', 'markdown', 'rst'] }
Plug 'powerman/vim-plugin-AnsiEsc', { 'on' : 'AnsiEsc' }
Plug 'keith/swift.vim', { 'for' : 'swift' }
Plug 'https://github.com/RRethy/vim-illuminate', { 'for': ['asm'] }

if has("nvim")
    Plug 'rsdubtso/nvim-solarized-lua'
    if has("nvim-0.6.0")
        " Plug 'lukas-reineke/indent-blankline.nvim'
        " let s:blankline_enabled = 1
        Plug 'neovim/nvim-lspconfig'
        if has("nvim-0.8.0")
            Plug 'hrsh7th/cmp-nvim-lsp'
            Plug 'hrsh7th/cmp-buffer'
            Plug 'hrsh7th/cmp-path'
            Plug 'hrsh7th/cmp-cmdline'
            Plug 'hrsh7th/nvim-cmp'
            Plug 'hrsh7th/cmp-vsnip'
            Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
            Plug 'hrsh7th/vim-vsnip'
            let g:cmp_enabled = 1
        else
            Plug 'nvim-lua/completion-nvim'
        endif
        if has("nvim-0.7.0")
            Plug 'lewis6991/gitsigns.nvim'
            let s:gitsigns_enabled = 1
        endif
        if has("nvim-0.7.0")
            Plug 'kevinhwang91/promise-async'
            Plug 'kevinhwang91/nvim-ufo'
            let g:ufo_enabled = 1
        endif

        Plug 'ray-x/lsp_signature.nvim'
        let g:lsp_enabled = 1

        Plug 'nvim-treesitter/nvim-treesitter'
        Plug 'HiPhish/rainbow-delimiters.nvim'
        let g:treesitter_enabled = 1
    endif
else
     Plug 'altercation/vim-colors-solarized'
endif

silent! source ~/.vim/plugins.local
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Appearance
set cursorline
set colorcolumn=80

if has("gui_running")
    " set t_ZH=^[[3m
    " set t_ZR=^[[23m
else
    set t_ZH=
    set t_ZR=
endif

if v:version > 801
    set diffopt+=internal,algorithm:patience
endif

if has("nvim")
    set termguicolors
    let g:solarized_statusline = 'normal'
    let g:solarized_diffmode = 'low'
    let g:solarized_italics = 0
    let g:solarized_transparent = 0
endif
colorscheme solarized

function! BeDark()
    hi IndentBlankLineChar guifg=#003342
    set background=dark
endfunction

function! BeLight()
    hi IndentBlankLineChar guifg=#fbecc1
    set background=light
endfunction

if $DARK_MODE == "0"
    :call BeLight()
else
    :call BeDark()
endif

nnoremap <Leader>cD :call BeDark()<CR>
nnoremap <Leader>cL :call BeLight()<CR>

highlight default link myDiagnosticError SpellBad
au BufWinEnter * let w:m3 = matchadd('myDiagnosticError', '\s\+$', -1)

augroup CursorLine
    au!
    au VimEnter * setlocal cursorline
    au WinEnter * setlocal cursorline
    au BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Deoplete
let g:deoplete#enable_at_startup = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Neovim-lsp
if exists("g:lsp_enabled")
    execute "luafile " . expand('<sfile>:p:h') . '/lua/lsp.lua'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Completion
if exists("g:cmp_enabled")
    execute "luafile " . expand('<sfile>:p:h') . '/lua/complete.lua'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treesitter
if exists("g:treesitter_enabled")
    execute "luafile " . expand('<sfile>:p:h') . '/lua/treesitter.lua'
endif

if &diff
    syntax off
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gitsigns
if exists("s:gitsigns_enabled")
    lua require('gitsigns').setup({sign_priority=0})
    nmap <Leader>gsn :Gitsigns next_hunk<CR>
    nmap <Leader>gsp :Gitsigns prev_hunk<CR>
    nmap <Leader>gss :Gitsigns stage_hunk<CR>
    nmap <Leader>gsu :Gitsigns undo_stage_hunk<CR>
    nmap <Leader>gsr :Gitsigns reset_hunk<CR>
    vmap <Leader>gss :'<,'>Gitsigns stage_hunk<CR>
    vmap <Leader>gsu :'<,'>Gitsigns undo_stage_hunk<CR>
    vmap <Leader>gsr :'<,'>Gitsigns reset_hunk<CR>
    set signcolumn=yes:1
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UFO
if exists("g:ufo_enabled")
    execute "luafile " . expand('<sfile>:p:h') . '/lua/ultrafold.lua'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Blankline
if exists("s:blankline_enabled")
    lua require('indent_blankline').setup({
                \ char = '▏',
                \ buftype_exclude = {'terminal'},
                \ show_trailing_blankline_indent = false,
                \ show_current_context = true,
                \ filetype_exclude = {'', 'help', 'terminal'}})
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nerdcommenter
let g:NERDCustomDelimiters = { 'asm': { 'left': '//','right': '' } }
let g:NERDCommentEmptyLines = 0
let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

" Repeat (some of) the default mappings to enable lazy loading
nmap <Leader>cc <Plug>NERDCommenterComment
vmap <Leader>cc <Plug>NERDCommenterComment
nmap <Leader>cu <Plug>NERDCommenterUncomment
vmap <Leader>cu <Plug>NERDCommenterUncomment

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffregator
let g:buffregator_suppress_mru_switching_keymaps = 1
" for lazy loading
nmap <Leader>b :BuffregatorOpen<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure fugitive to use familiar key bindings
nmap <Leader>gb :Git blame<CR>
nmap <Leader>gD :Gdiff<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure autocompletion
set completeopt-=preview
set completeopt=menuone
if v:version > 800
    set completeopt+=noinsert,noselect
endif
set shortmess+=c

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
let g:vim_markdown_math=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure vim behavior
if v:version >= 800
    set nofixeol
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ensure correct highlighting for Fortran free-form source code
let fortran_free_source=1
let fortran_do_enddo=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" status line
set laststatus=2

let unicode_status_line=0

function! GitInfo()
    try
        let git = fugitive#head()
        if git != ''
            return git.'│'
        else
            return ''
        endif
    catch
        return ''
    endtry
endfunction

function! FuncInfo()
    try
        "let ct = tagbar#currenttag('%s', '')
        let ct = nvim_treesitter#statusline()
        if ct != ''
            return ct.'│'
        else
            return ''
        endif
    catch
        return ''
    endtry
endfunction

function! RegularStatusLine()
    set statusline=
    set statusline+=\ %n
    set statusline+=│
    set statusline+=%*%<\ %F\ %=
    set statusline+=│
    set statusline+=%{FuncInfo()}
    set statusline+=%{GitInfo()}
    set statusline+=%{&fileencoding}
    set statusline+=│
    set statusline+=%{&fileformat}
    set statusline+=│
    set statusline+=%M%R%Y
    set statusline+=│
    set statusline+=%l/%L(%P),%c
endfunction

function! FileNameStatusLine()
    set statusline=%F
endfunction

call RegularStatusLine()
nnoremap <Leader>SF :call FileNameStatusLine()<CR>
nnoremap <Leader>SN :call RegularStatusLine()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar
hi clear IlluminatedWordText
hi link IlluminatedWordText LspReferenceText

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar
nnoremap <silent> <F9> :TagbarToggle<CR>
autocmd FileType tagbar setlocal nocursorline nocursorcolumn
let g:tagbar_show_linenumbers = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Check for modified files (https://github.com/neovim/neovim/issues/2127)
if has("nvim")
augroup AutoSwap
    autocmd!
    autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
    " if swapfile is older than file itself, just get rid of it
    if getftime(v:swapname) < getftime(a:filename)
        call delete(v:swapname)
        let v:swapchoice = 'e'
    endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave * if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        silent! autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" XXX: find a better place for this
autocmd Filetype c,cpp set comments^=:///
nmap K :Man<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neovim terminal mode
if has("nvim")
    " Make escape work in the Neovim terminal.
    tnoremap <Esc> <C-\><C-n>

    " Make navigation into and out of Neovim terminal splits nicer.
    tnoremap <C-h> <C-\><C-N><C-w>h
    tnoremap <C-j> <C-\><C-N><C-w>j
    tnoremap <C-k> <C-\><C-N><C-w>k
    tnoremap <C-l> <C-\><C-N><C-w>l

    " I like relative numbering when in normal mode.
    autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 nonumber norelativenumber
    " autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 relativenumber

    " Prefer Neovim terminal insert mode to normal mode.
    autocmd BufEnter term://* startinsert
endif

silent! source ~/.vim/vimrc.local

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neovide
if exists("g:neovide")
    let g:neovide_position_animation_length = 0
    let g:neovide_cursor_animation_length = 0.00
    let g:neovide_cursor_trail_size = 0
    let g:neovide_cursor_animate_in_insert_mode = 0
    let g:neovide_cursor_animate_command_line = 0
    let g:neovide_scroll_animation_far_lines = 0
    let g:neovide_scroll_animation_length = 0.00
endif

endif  " nocompatible

" vim: ts=4 sw=4 et
