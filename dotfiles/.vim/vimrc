if !has("compatible")

call plug#begin()
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-speeddating'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'scrooloose/nerdcommenter', { 'for' : ['python', 'c', 'cpp', 'bash', 'sh', 'conf', 'vim', 'perl', 'tex', 'cmake', 'asm', 'bzl'] }
Plug 'gcmt/taboo.vim'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-markdown'
Plug 'christoomey/vim-conflicted'
Plug 'majutsushi/tagbar', { 'for' : ['c', 'cpp', 'python', 'perl'] }
if has("nvim")
    Plug 'klen/python-mode', { 'for' : 'python', 'branch' : 'develop' }
    Plug 'Shougo/deoplete.nvim', { 'for' : ['asm', 'bash', 'sh', 'conf', 'cmake'] }
    Plug 'natebosch/vim-lsc'
    Plug 'dhruvasagar/vim-table-mode', { 'for' : ['text', 'markdown'] }
endif
silent! source ~/.vim/plugins.local
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neovim-specific plugins
if has("nvim")
    " python path
    let g:python_host_prog = '~/.linuxbrew/bin/python2'

    " deoplete
    let g:deoplete#enable_at_startup = 1

    " vim-lsc
    let g:lsc_auto_map = {'defaults': v:true, 'ShowHover': ''}
    let g:lsc_enable_autocomplete = v:true
    let g:lsc_server_commands = {
                \ 'c' : {
                \   'name': 'c',
                \   'command': 'clangd',
                \   'enabled': v:true,
                \   'suppress_stderr': v:true,
                \ },
                \ 'cpp' : {
                \   'name': 'cpp',
                \   'command': 'clangd',
                \   'enabled': v:true,
                \   'suppress_stderr': v:true,
                \ },
                \ 'python': {
                \   'name': 'python',
                \   'command': 'pyls',
                \   'enabled': v:true,
                \   'suppress_stderr': v:true,
                \ }
                \ }
    " nmap <Leader>ad :LSClientAllDiagnostics<CR>:copen<CR>
    " nmap <Leader>aD :cclose<CR>

    " python-mode
    let g:pymode_syntax = 0
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" appearance
" set t_Co=256
au BufWinEnter * highlight WhitespaceError ctermbg=red guibg=red
au BufWinEnter * let w:m3=matchadd('WhitespaceError', '\s\+$', -1)
set cursorline
set colorcolumn=80
set background=light
if has("nvim")
    " set termguicolors
    colorscheme lucius-with-bold
    :LuciusWhiteHighContrast
else
    colorscheme default
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure nerdcommenter
let g:NERDCustomDelimiters = { 'asm': { 'left': '//','right': '' } }
let g:NERDCommentEmptyLines = 0
let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure Taboo
set sessionoptions+=tabpages,globals " save tab names in session files

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure figutive to use familiar key bindings
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gD :Gdiff<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure autocompletion
set completeopt-=preview

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
let g:vim_markdown_math=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure vim behavior
set hidden
set wildmode=longest:full,list
set tags=tags,./tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags
set autochdir

set noautoread

set tw=78
set tabstop=4
set shiftwidth=4
set expandtab
set formatoptions=tcqo2nr
set autoindent
set backspace=eol,start,indent
set cino=:0

set foldopen=mark,percent,quickfix,search,tag,undo

set incsearch
set ignorecase
set smartcase

set number
set nowrap
set sidescroll=5
set scrolloff=3
set listchars+=precedes:<,extends:>
set showmatch

set foldmethod=syntax
set foldcolumn=4

set mouse=nvi

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" status line
set laststatus=2

let unicode_status_line=0

function! GitInfo()
    let git = fugitive#head()
    if git != ''
        return '↑'.git.'│'
    else
        return ''
    endif
endfunction

function! FuncInfo()
    try
        let ct = tagbar#currenttag('%s', '')
        if ct != ''
            return ct.'│'
        else
            return ''
        endif
    catch
        return ''
    endtry
endfunction

function! RegularStatusLine()
    set statusline=
    " Advanced unicode version
    " set statusline+=▏
    " set statusline+=\ %n
    " set statusline+=▕%*%<\ %F\ %=▏
    " set statusline+=%{FuncInfo()}
    " set statusline+=%{GitInfo()}
    " set statusline+=%{&fileencoding}
    " set statusline+=│
    " set statusline+=%{&fileformat}
    " set statusline+=│
    " set statusline+=%M%R%Y
    " set statusline+=│
    " set statusline+=%l/%L(%P),%c
    " Unicode version
    set statusline+=\ %n
    set statusline+=│
    set statusline+=%*%<\ %F\ %=
    set statusline+=│
    set statusline+=%{FuncInfo()}
    set statusline+=%{GitInfo()}
    set statusline+=%{&fileencoding}
    set statusline+=│
    set statusline+=%{&fileformat}
    set statusline+=│
    set statusline+=%M%R%Y
    set statusline+=│
    set statusline+=%l/%L(%P),%c
endfunction

function! FileNameStatusLine()
    set statusline=%F
endfunction

call RegularStatusLine()
nnoremap <Leader>SF :call FileNameStatusLine()<CR>
nnoremap <Leader>SN :call RegularStatusLine()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar
nnoremap <silent> <F9> :TagbarToggle<CR>
autocmd FileType tagbar setlocal nocursorline nocursorcolumn
let g:tagbar_show_linenumbers = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" sensible-like keybinding to toggle hls
nnoremap <C-l> :set invhls<CR>
nnoremap gW :bw<CR>
nnoremap gb :bn<CR>
nnoremap gp :bp<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Check for modified files (https://github.com/neovim/neovim/issues/2127)
if has("nvim")
augroup AutoSwap
        autocmd!
        autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
        " if swapfile is older than file itself, just get rid of it
        if getftime(v:swapname) < getftime(a:filename)
                call delete(v:swapname)
                let v:swapchoice = 'e'
        endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave * if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" XXX: find a better place for this
autocmd Filetype c,cpp set comments^=:///

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neovim terminal mode
if has("nvim")
  " Make escape work in the Neovim terminal.
  tnoremap <Esc> <C-\><C-n>

  " Make navigation into and out of Neovim terminal splits nicer.
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l

  " I like relative numbering when in normal mode.
  autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 nonumber norelativenumber
  " autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 relativenumber

  " Prefer Neovim terminal insert mode to normal mode.
  autocmd BufEnter term://* startinsert
endif

silent! source ~/.vim/vimrc.local

endif

