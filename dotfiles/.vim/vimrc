if !has("compatible")
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General configuration
syntax on
set hidden
set wildmode=longest:full,list
set tags=tags,./tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags
set autochdir

set noautoread

set tw=120
set tabstop=4
set shiftwidth=4
set expandtab
set formatoptions=tcqo2nr
set autoindent
set backspace=eol,start,indent
set cino=:0:l1,j1

set foldopen=mark,percent,quickfix,search,tag,undo

set incsearch
set ignorecase
set smartcase

set number
set nowrap
set sidescroll=5
set scrolloff=3
set listchars+=precedes:<,extends:>
set showmatch

set foldmethod=syntax

set mouse=nvi
set clipboard=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybindings
nnoremap <C-l> :set invhls<CR>
nnoremap gW :bw<CR>
nnoremap gb :bn<CR>
nnoremap gp :bp<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Advanced configuration
if has("nvim")

call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'scrooloose/nerdcommenter', { 'for' : ['python', 'make', 'c', 'cpp', 'cuda', 'bash', 'sh', 'conf', 'vim', 'perl', 'tex', 'cmake', 'asm', 'bzl'] }
Plug 'majutsushi/tagbar', { 'for' : ['c', 'cpp', 'python', 'perl'] }
Plug 'ervandew/supertab'
Plug 'EdenEast/nightfox.nvim'
Plug 'bfrg/vim-cuda-syntax'
Plug 'Shougo/deoplete.nvim', { 'for' : ['asm', 'bash', 'sh', 'conf', 'cmake'] }
Plug 'dhruvasagar/vim-table-mode', { 'for' : ['text', 'markdown', 'rst'] }

if has("nvim-0.5.0")
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-lua/completion-nvim'
    let s:lsp_enabled = 1
else
    let s:lsp_enabled = 0
endif

if has("nvim-0.6.0")
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    let s:treesitter_enabled = 1
else
    let s:treesitter_enabled = 0
endif

silent! source ~/.vim/plugins.local
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Appearance
set cursorline
set colorcolumn=120

highlight default link myReference Cursor
highlight default link myDiagnosticError SpellBad

if $DARK_MODE == "0"
    set termguicolors
    colorscheme default
    set background=light
else
    set termguicolors
    " let g:onedark_color_overrides = { "black" : {"gui": "#21252b", "cterm": "0", "cterm16" : "0" } }
    " colorscheme onedark
    " highlight! myReference guibg=#576275
    " highlight! myDiagnosticError guibg=#712e28
    colorscheme nightfox
endif

au BufWinEnter * let w:m3 = matchadd('myDiagnosticError', '\s\+$', -1)

augroup CursorLine
    au!
    au VimEnter * setlocal cursorline
    au WinEnter * setlocal cursorline
    au BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Deoplete
let g:deoplete#enable_at_startup = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Neovim-lsp
if s:lsp_enabled == 1
    execute "luafile " . expand('<sfile>:p:h') . '/lua/lsp.lua'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treesitter
if s:treesitter_enabled == 1
    execute "luafile " . expand('<sfile>:p:h') . '/lua/treesitter.lua'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nerdcommenter
let g:NERDCustomDelimiters = { 'asm': { 'left': '//','right': '' } }
let g:NERDCommentEmptyLines = 0
let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffergator
let g:buffergator_suppress_mru_switching_keymaps = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure figutive to use familiar key bindings
nmap <Leader>gb :Git blame<CR>
nmap <Leader>gD :Gdiff<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure autocompletion
set completeopt-=preview
set completeopt=menuone,noinsert,noselect
set shortmess+=c

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
let g:vim_markdown_math=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" configure vim behavior
set nofixeol

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ensure correct highlighting for Fortran free-form source code
let fortran_free_source=1
let fortran_do_enddo=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" status line
set laststatus=2

let unicode_status_line=0

function! GitInfo()
    try
        let git = fugitive#head()
        if git != ''
            return '↑'.git.'│'
        else
            return ''
        endif
    catch
        return ''
    endtry
endfunction

function! FuncInfo()
    try
        let ct = tagbar#currenttag('%s', '')
        if ct != ''
            return ct.'│'
        else
            return ''
        endif
    catch
        return ''
    endtry
endfunction

function! RegularStatusLine()
    set statusline=
    " Advanced unicode version
    " set statusline+=▏
    " set statusline+=\ %n
    " set statusline+=▕%*%<\ %F\ %=▏
    " set statusline+=%{FuncInfo()}
    " set statusline+=%{GitInfo()}
    " set statusline+=%{&fileencoding}
    " set statusline+=│
    " set statusline+=%{&fileformat}
    " set statusline+=│
    " set statusline+=%M%R%Y
    " set statusline+=│
    " set statusline+=%l/%L(%P),%c
    " Unicode version
    set statusline+=\ %n
    set statusline+=│
    set statusline+=%*%<\ %F\ %=
    set statusline+=│
    set statusline+=%{FuncInfo()}
    set statusline+=%{GitInfo()}
    set statusline+=%{&fileencoding}
    set statusline+=│
    set statusline+=%{&fileformat}
    set statusline+=│
    set statusline+=%M%R%Y
    set statusline+=│
    set statusline+=%l/%L(%P),%c
endfunction

function! FileNameStatusLine()
    set statusline=%F
endfunction

call RegularStatusLine()
nnoremap <Leader>SF :call FileNameStatusLine()<CR>
nnoremap <Leader>SN :call RegularStatusLine()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar
nnoremap <silent> <F9> :TagbarToggle<CR>
autocmd FileType tagbar setlocal nocursorline nocursorcolumn
let g:tagbar_show_linenumbers = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Check for modified files (https://github.com/neovim/neovim/issues/2127)
if has("nvim")
augroup AutoSwap
        autocmd!
        autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
        " if swapfile is older than file itself, just get rid of it
        if getftime(v:swapname) < getftime(a:filename)
                call delete(v:swapname)
                let v:swapchoice = 'e'
        endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave * if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" XXX: find a better place for this
autocmd Filetype c,cpp set comments^=:///

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neovim terminal mode
if has("nvim")
  " Make escape work in the Neovim terminal.
  tnoremap <Esc> <C-\><C-n>

  " Make navigation into and out of Neovim terminal splits nicer.
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l

  " I like relative numbering when in normal mode.
  autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 nonumber norelativenumber
  " autocmd TermOpen * setlocal conceallevel=0 colorcolumn=0 relativenumber

  " Prefer Neovim terminal insert mode to normal mode.
  autocmd BufEnter term://* startinsert
endif

silent! source ~/.vim/vimrc.local

else

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fallback appearance settings for older Vim versions
colorscheme default
if $DARK_MODE == '0'
    set background=light
else
    set background=dark
endif

endif
endif

